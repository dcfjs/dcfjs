syntax="proto3";

package dcf;

enum WorkerStatus {
  UNKNOWN = 0;
  READY = 1;
  ERROR = 2;
  SHUTDOWN = 3;
}

message RegisterWorkerRequest {
  string endpoint = 1;
}

message RegisterWorkerResponse {
}

message UnregisterWorkerRequest {
  string endpoint = 1;
}

message UnregisterWorkerResponse {
}

message MasterExecRequest {
  // 使用 objpack 包装 SerializedFunction，参数为({dispatchWork})，返回任意可序列化结果
  bytes func = 1;
}

message MasterExecResponse {
  // 使用 msgpack 包装返回值
  bytes result = 1;

  // 出错时包含error消息
  string errorMessage = 2;
}

service MasterService {
  rpc registerWorker(RegisterWorkerRequest) returns(RegisterWorkerResponse);

  rpc unregisterWorker(UnregisterWorkerRequest) returns(UnregisterWorkerResponse);

  rpc exec(MasterExecRequest) returns(stream MasterExecResponse);
}

message WorkerExecRequest {
  // 使用 objpack 包装 SerializedFunction，无参数，返回任意可序列化结果
  bytes func = 1;
}

message WorkerExecResponse {
  // 使用 msgpack 包装返回值
  bytes result = 1;
}

service WorkerService {
  rpc exec(WorkerExecRequest) returns(WorkerExecResponse);
}

message CreateSessionRequest {
  double expireAt = 1;
}

message CreateSessionResponse {
  string sessionId = 1;
}

message RenewSessionRequest {
  string sessionId = 1;

  double expireAt = 2;
}

message RenewSessionResponse {
}

message CloseSessionRequest {
  string sessionId = 1;
}

message CloseSessionResponse {
}

message PutFileRequest {
  string sessionId = 1;

  string key = 2;

  bytes data = 3;
}

message PutFileResponse {}

message GetFileRequest {
  string sessionId = 1;

  string key = 2;
}

message GetFileResponse {
  bytes data = 1;
}

service StorageService {
  rpc createSession(CreateSessionRequest) returns(CreateSessionResponse);

  rpc renewSession(RenewSessionRequest) returns(RenewSessionResponse);

  rpc closeSession(CloseSessionRequest) returns(CloseSessionResponse);

  rpc putFile(stream PutFileRequest) returns(PutFileResponse);

  rpc getFile(GetFileRequest) returns(stream GetFileResponse);
}
